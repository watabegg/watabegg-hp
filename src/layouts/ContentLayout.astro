---
// src/layouts/ContentLayout.astro
import Layout from './Layout.astro';

interface Props {
  title: string;
  publishDate?: Date; // Optional for products/blogs that might not have it
  author?: string; // Optional, mainly for blog
  tags?: string[];
  imageUrl?: string;
  description?: string; // Add description prop
}

const { title, publishDate, author, tags, imageUrl, description } = Astro.props; // Destructure description
const placeholderImageUrl = '/images/placeholder.svg';
const displayImageUrl = imageUrl || placeholderImageUrl;

// Determine article type based on URL path (simple example)
const isBlog = Astro.url.pathname.startsWith('/blog/');
const articleType = isBlog ? 'BlogPosting' : 'Article';

// Construct image URL for structured data
const structuredDataImageUrl = imageUrl ? new URL(imageUrl, Astro.site).toString() : undefined;

---
{/* Pass description, ogImageUrl, and ogType to Layout */}
<Layout title={title + ' | watabeggの個人サイト'} {description} ogImageUrl={imageUrl} ogType="article">
  {/* JSON-LD Structured Data for Article/BlogPosting */}
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": articleType,
    "headline": title,
    "description": description,
    "image": structuredDataImageUrl, // Use absolute URL or omit if no image
    "datePublished": publishDate?.toISOString(), // Format date as ISO string
    "author": author ? { "@type": "Person", "name": author } : undefined, // Add author if available
    "publisher": { "@type": "Organization", "name": "watabegg", "logo": { "@type": "ImageObject", "url": new URL('/images/ogp_default.png', Astro.site).toString() } }, // Publisher info
    "mainEntityOfPage": { "@type": "WebPage", "@id": Astro.url.toString() }
  })} />

  <article class="container mx-auto px-6 py-16 flex flex-col md:text-left items-center">
    {/* Image with placeholder logic */}
    {/* Use displayImageUrl which includes placeholder logic */}
    <img src={displayImageUrl} alt={`Image for ${title}`} class="w-full h-auto object-cover rounded-md mb-8 shadow-md" />

    {/* Heading */}
    <h1 class="text-4xl font-bold mb-4 text-base-content">{title}</h1>

    {/* Meta Info */}
    <div class="text-sm text-base-content/70 mb-6 flex items-center gap-2 flex-wrap">
      {author && (
        <>
          <span>作成者: {author}</span>
          <span class="text-base-content/50">|</span>
        </>
      )}
      {publishDate && (
        <span>公開日: {publishDate.toLocaleDateString('ja-JP')}</span>
      )}
    </div>

    {/* Tags */}
    {tags && tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-8">
        {tags.map(tag => (
          <span class="bg-secondary text-secondary-content text-xs font-medium px-4 py-2 rounded-xl">
            {tag}
          </span>
        ))}
      </div>
    )}

    <div class="prose lg:prose-xl">
      <slot /> 
    </div>

    <div class="mt-8">
      <button onclick="history.back()" class="btn btn-primary btn-lg">戻る</button>
    </div>
  </article>
</Layout>

<style>
  /* Ensure placeholder SVG scales correctly */
  img[src$=".svg"] {
    object-fit: contain; /* Adjust as needed, 'contain' might be better for SVG */
    background-color: #f3f4f6; /* Light gray background for placeholder */
  }
</style>
